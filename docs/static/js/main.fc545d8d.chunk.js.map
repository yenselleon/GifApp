{"version":3,"sources":["components/AddCategories.jsx","components/GifGridItem.jsx","helpers/getGif.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","target","value","type","onChange","prototypes","PropTypes","func","isRequired","GifGridItem","title","url","id","className","src","alt","getGif","category","a","encodeURI","fetch","resp","json","then","data","map","img","images","downsized_medium","gif","GifGrid","loading","state","setState","useEffect","setTimeout","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sLAGaA,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,aAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACI,sBAAMC,SAZO,SAACC,GAGd,GAFAA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,EAI1B,OAFAR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEhCN,EAAeE,EAAEK,OAAOC,MAAQ,KAK3C,SACI,uBACIC,KAAK,OACLD,MAAQT,EACRW,SApBc,SAACR,GACvBF,EAAeE,EAAEK,OAAOC,aAyBhCZ,EAAce,WAAa,CACvBd,cAAee,IAAUC,KAAKC,Y,YC/BrBC,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,IAAY,EAARC,GACpC,OACI,sBAAKC,UAAU,gBAAf,UACI,qBAAKC,IAAKH,EAAKI,IAAKL,IACpB,mCAAMA,EAAN,W,wBCLCM,EAAM,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAEZP,EAFY,yFAE6EQ,UAAUF,GAFvF,sBAGCG,MAAMT,GAHP,cAGZU,EAHY,gBAICA,EAAKC,OAAOC,MAAK,SAAAF,GAAI,OAAIA,EAAKG,QAJ/B,cAIZA,EAJY,gBAKAA,EAAKC,KAAI,SAAAC,GACvB,MAAM,CACFd,GAAIc,EAAId,GACRF,MAAOgB,EAAIhB,MACXC,IAAKe,EAAIC,OAAOC,iBAAiBjB,QATvB,cAKZkB,EALY,yBAeXA,GAfW,4CAAH,sDCGNC,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EAEdzB,mBAAS,CAC/BgC,KAAM,GACNO,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAjBAC,qBAAW,WAGPC,YAAW,WAEPnB,EAAQC,GACDM,MAAM,SAAAa,GACDH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAI1B,OAEJ,CAAEd,IAEEe,EDpBwBK,CAAcpB,GAAjCU,EAHuB,EAG5BH,KAAaO,EAHe,EAGfA,QAIpB,OAEI,qCACMA,GAAW,yCAEb,sBAAKlB,UAAU,qBAAf,UAEI,6BAAKI,IAIDU,EAAOF,KAAK,SAACC,GAAD,OACR,cAAE,EAAF,eAEQA,GADCA,EAAId,cEQtB0B,EA5BM,WAAO,IAAD,EAEa9C,mBAAS,CAAC,KAFvB,mBAEhB+C,EAFgB,KAEJhD,EAFI,KAKvB,OACI,qCACI,8CAEA,cAAC,EAAD,CAAeA,cAAgBA,IAC/B,uBAEA,6BAEQgD,EAAWd,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCTnBuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.fc545d8d.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategories = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('one punch');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value);\r\n    };\r\n\r\nconst handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2){\r\n\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            \r\n            return setInputValue( e.target.value = '');\r\n        };\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategories.prototypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","import React from 'react'\r\nimport '../index.css'\r\n\r\nexport const GifGridItem = ({title, url,id}) => {\r\n    return (\r\n        <div className=\"wrapper__Card\">\r\n            <img src={url} alt={title} />\r\n            <h1> {title} </h1>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGif = async( category ) => {\r\n\r\n    const url = `http://api.giphy.com/v1/gifs/search?api_key=kgwQ2cxgmP3eHEgUpqBwKmSjsy8Bvt6s&q=${ encodeURI(category) }&limit=10`;\r\n    const resp = await fetch(url);\r\n    const data = await resp.json().then(resp => resp.data);\r\n    const gif = await data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n    \r\n\r\n    return gif;\r\n}","import { GifGridItem } from './GifGridItem';\r\nimport '../index.css';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    \r\n    const {data:images, loading} = useFetchGifs( category );\r\n    \r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            { loading && <p>Cargando</p> }\r\n\r\n            <div className=\"wrapper__container\">\r\n                \r\n                <h3>{category}</h3>\r\n                \r\n                \r\n                {\r\n                    images.map( (img) => (\r\n                        < GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            \r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/getGif\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n\r\n        setTimeout(() => {\r\n            \r\n            getGif( category )\r\n                  .then( imgs =>  {\r\n                        setState({\r\n                            data: imgs,\r\n                            loading: false,\r\n                        });\r\n                  });\r\n            \r\n        }, 3000);\r\n\r\n    }, [ category ]);\r\n\r\n    return state;\r\n\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategories } from './components/AddCategories';\r\nimport {GifGrid} from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategories setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp' \n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}